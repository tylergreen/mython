#! /usr/bin/env mython
# ______________________________________________________________________
"""antlr.my

Playing around with embedding ANTLR.
"""
# ______________________________________________________________________
# Module imports

# XXX Requires ../pycon2010/myutils.py to be in the compile time PYTHONPATH...
import subprocess
import myutils

# ______________________________________________________________________
# Class definitions

quote [myutils.myboth]:

    def indented_file_content (fname, ilevel = 4):
        indent_str = " " * ilevel
        return "".join((indent_str + ln for ln in open(fname).readlines()))

    def antlr (name, src, env):
        fname = name + ".g"
        fobj = open(fname, "w")
        fobj.write("grammar %s;\n\noptions { language = Python; \n"
                   "output = AST; }\n\n" % name)
        fobj.write(src)
        fobj.close()
        subprocess.check_call(["java", "org.antlr.Tool", fname])
        gen_src = "class %s (object):\n" % name
        gen_src += indented_file_content(name + "Lexer.py")
        gen_src += indented_file_content(name + "Parser.py")
        fobj = open(name + ".py", "w")
        fobj.write(gen_src)
        fobj.close()
        print "_" * 70
        print gen_src
        print "_" * 70
        return myutils.nonquote_myboth(gen_src, env)

# ______________________________________________________________________
# Test definitions

quote [antlr] antlr_test_1:
    prog: stat+;
    stat: expr NEWLINE!
    | ID '='^ expr NEWLINE!
    | NEWLINE!
    ;
    expr: multExpr (('+'^|'-'^) multExpr)*
    ;
    multExpr
    : atom ('*'^ atom)*
    ;
    atom: INT
    | ID
    | '('! expr ')'!
    ;
    ID : ('a'..'z'|'A'..'Z')+ ;
    INT : '0'..'9'+ ;
    NEWLINE: '\r'? '\n' ;
    WS : (' '|'\t'|'\n'|'\r')+ {$channel=HIDDEN} ;

# ______________________________________________________________________

if __name__ == "__main__":
    print antlr_test_1

# ______________________________________________________________________
# End of antlr.my
