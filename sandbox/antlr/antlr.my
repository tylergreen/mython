#! /usr/bin/env mython
# ______________________________________________________________________
"""antlr.my

Playing around with embedding ANTLR.
"""
# ______________________________________________________________________
# Module imports

# XXX Requires ../pycon2010/myutils.py to be in the compile time PYTHONPATH...
import os
import subprocess
import parser
import marshal
import myutils

# XXX These are required for both compile-time and run-time ANTLR support.
from antlr3 import *
from antlr3.tree import *

# ______________________________________________________________________
# Class definitions

quote [myutils.myboth]:

    def mk_balanced_parser (odelim = None, cdelim = None, strict = False):
        if odelim is None:
            odelim = "({["
        if cdelim is None:
            cdelim = ")}]"
        def _parser (in_str):
            ret_val = []
            if strict:
                elem_stack = []
            stack = [ret_val]
            for elem in in_str.split():
                if elem in odelim:
                    child = []
                    stack[-1].append(child)
                    stack.append(child)
                    if strict:
                        elem_stack.append(elem)
                elif elem in cdelim:
                    stack.pop()
                    if strict:
                        oelem = elem_stack.pop()
                        assert cdelim[odelim.index(oelem)] == elem
                else:
                    stack[-1].append(elem)
            if strict:
                assert len(stack) == 1, "Unbalanced expression"
            return ret_val
        return _parser

    balanced_parser = mk_balanced_parser()

    quote [myutils.mystring] module_template:
        class __%(name)s__ (object):
            from types import ModuleType
            import marshal
            co = marshal.loads(%(co_str)r)
            module = ModuleType(%(name)r)
            exec co in module.__dict__
        %(name)s = __%(name)s__.module
        del __%(name)s__

    def mk_module_from_code (name, src):
        co_str = marshal.dumps(parser.compilest(parser.suite(src)))
        return module_template % {'name' : name, 'co_str' : co_str}

    # XXX Getting some weird namespace problems with this code: Mython
    # can't handle an import of the StringIO module (I'm using a work
    # around by explicitly importing the StringIO class), nor can it
    # handle the case where parse_string() uses parse_file() without a
    # global statement (this work around causes parse_file to appear
    # in the containing (antlr) module).  Possibly related to issue
    # 10?!?

    quote [myutils.mystring] antlr_template:
        from StringIO import StringIO
        import antlrutils
        from basil.lang.mython.mybuiltins import makequote

        grtree = %(grtree)r

        %(lexer)s

        %(parser)s

        parse_file = antlrutils.mk_parse_file(%(name)sLexer.%(name)sLexer,
                                              %(name)sParser.%(name)sParser)

        def parse_string (src):
            global parse_file
            return parse_file(StringIO(src))

        quoter = makequote(parse_string)

    def antlr (name, src, env):
        fname = name + ".g"
        fobj = open(fname, "w")
        fobj.write("grammar %s;\n\noptions { language = Python; \n"
                   "output = AST; }\n\n" % name)
        fobj.write(src)
        fobj.close()
        grtree_child = subprocess.Popen(["java", "org.antlr.Tool", "-Xgrtree",
                                         fname], stdout = subprocess.PIPE)
        grtree_str = grtree_child.communicate()[0]
        grtree = balanced_parser(grtree_str)
        tok_file_name = name + ".tokens"
        lexer_file_name = name + "Lexer.py"
        parser_file_name = name + "Parser.py"
        src0 = antlr_template % {
            'name' : name, 'grtree' : grtree,
            'tokens' : "".join((ln for ln in
                                open(name + ".tokens").readlines()
                                if len(ln) > 0 and ln[0] != "'")),
            'lexer' : mk_module_from_code(name + "Lexer",
                                          open(lexer_file_name).read()),
            'parser' : mk_module_from_code(name + "Parser",
                                           open(parser_file_name).read())
            }
        os.unlink(fname)
        os.unlink(tok_file_name)
        os.unlink(lexer_file_name)
        os.unlink(parser_file_name)
        src1 = mk_module_from_code(name, src0)
        return myutils.nonquote_myboth(src1, env)

# ______________________________________________________________________
# Test definitions

quote [antlr] antlr_test_1:
    start    : prog
    ;
    prog     : stat (NEWLINE! stat)*
    ;
    stat     : expr
             | ID '='^ expr
             | /* Empty */
    ;
    expr     : multExpr (('+'^|'-'^) multExpr)*
    ;
    multExpr : atom ('*'^ atom)*
    ;
    atom     : INT
             | ID
             | '('! expr ')'!
    ;

    ID       : ('a'..'z'|'A'..'Z')+
    ;
    INT      : '0'..'9'+
    ;
    NEWLINE  : '\r'? '\n'
    ;
    WS       : (' '|'\t')+ {$channel=HIDDEN}
    ;

quote [antlr_test_1.quoter] antlr_test_1_1:
    3 + 4

quote [antlr_test_1.quoter] antlr_test_1_2:
    x = (3 + 4) * 5
    y = x - 17
    x * y

# ______________________________________________________________________

if __name__ == "__main__":
    import pprint
    print antlr_test_1
    print antlr_test_1_1
    pprint.pprint(antlr_test_1_2)

# ______________________________________________________________________
# End of antlr.my
