#! /usr/bin/env python
# ______________________________________________________________________
"""Script pgen2handler.py

NOTE: This assumes you are handling a CPT generated by my tools.

Jonathan Riehl

$Id$
"""
# ______________________________________________________________________
# Module imports

from pgen2LL1 import PgenFrontEnd, process_rules, gen_code_lines

# ______________________________________________________________________

def make_class (methods, klass = None, start = None):
    if klass is None:
        klass = "MyHandler"
    ret_val = ["#! /usr/bin/env python",
               "from Handler import *",
               "",
               "class %s (Handler):" % klass,
               ["def get_children (self, node):",
                ["return None if self.is_token(node) else node[1]"],
                "",
                "def get_nonterminal (self, node):",
                ["return node[0]"],
                "",
                "def is_token (self, node):",
                ["return type(node[0]) == tuple"],
                "",
                "def make_node (self, node_id, children):",
                ["return (node_id, children)"], ""]
               ]
    method_names = methods.keys()
    method_names.sort()
    for method_name in method_names:
        ret_val.append(["def %s (self, node):" % method_name,
                        methods[method_name] , ""])
    ret_val.append("")
    return ret_val

# ______________________________________________________________________
# Main routine

def main (*args):
    # Parse the input pgen file.
    fe = PgenFrontEnd()
    fe.handle_args(*args)
    cpt = fe.get_concrete_parse()
    rules = process_rules(cpt)
    # For each nonterminal, create a handler method.
    methods = {}
    rule_names = [rule_name for rule_name in rules.keys()
                  if rule_name[0] != "_"]
    for rule_name in rule_names:
        methods["handle_%s" % rule_name] = [
            "child_results = self.handle_children(node)",
            "return child_results"]
    # Anything else? (Overloading needed traversal methods?)
    klass = make_class(methods, fe.klass_name, fe.start)
    code_lines = gen_code_lines(klass)
    fe.output_text("\n".join(code_lines))

# ______________________________________________________________________

if __name__ == "__main__":
    import sys
    main(*sys.argv[1:])

# ______________________________________________________________________
# End of pgen2handler.py
