#! /usr/bin/env mython
# ______________________________________________________________________
"""Test module fe_test01.my

Simple test case for initial C++ code generation.

Jonathan Riehl

$Id$
"""
# ______________________________________________________________________
# Module imports

from basil.lang.fenics import FEniCS
from basil.lang.fenics.bvpir import *

# ______________________________________________________________________
# Module data

quote [myfront]:
    from basil.lang.fenics import FEniCS

# ____________________________________________________________

quote [FEniCS.bvpFrontEnd] Mass:
    TestFunction v
    UnknownField u

    <v, u>

# ____________________________________________________________

quote [FEniCS.bvpFrontEnd] Laplace:
    TestFunction v
    UnknownField u

    <grad v, grad u>

# ______________________________________________________________________
# Main routine

def main (*args):
    kw_args = {}
    for arg in args:
        arg_split = arg.split("=")
        if len(arg_split) > 1:
            for key in arg_split[:-1]:
                kw_args[key] = arg_split[-1]
        else:
            kw_args[arg_split[0]] = 1
    print "void Jac_Mass (const Obj<ALE::Mesh>& m, const Obj<ALE::Mesh::real_section_type>& s, Mat A, void * ctx)"
    print FEniCS.bvpIRToCplus(Mass, **kw_args)
    print
    print "void Jac_Laplace (const Obj<ALE::Mesh>& m, const Obj<ALE::Mesh::real_section_type>& s, Mat A, void * ctx)"
    print FEniCS.bvpIRToCplus(Laplace, **kw_args)

# ______________________________________________________________________

if __name__ == "__main__":
    import sys
    main(*sys.argv[1:])

# ______________________________________________________________________
# End of fe_test01.my
